1.法一，创建1个二位vector
int minPathSum(vector<vector<int>>& grid) {
        // 动态规划 先写出dp方程
        // dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
        if(grid.empty() || grid[0].empty()) return 0;
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n));
    
        dp[0][0] = grid[0][0];
        for(int i=1; i<m; i++) {
            dp[i][0] = grid[i][0] + dp[i-1][0];
        }
        for(int j=1; j<n; j++) {
            dp[0][j] = grid[0][j] + dp[0][j-1];
        }
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
    
法二：在原数组上累加
    int minPathSum(vector<vector<int>>& grid) {
        // 动态规划 先写出dp方程
        // dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
        if(grid.empty() || grid[0].empty()) return 0;
        int m = grid.size();
        int n = grid[0].size();
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(i==0 && j==0) continue;
                else if(i==0) grid[i][j] += grid[i][j-1];
                else if(j==0) grid[i][j] += grid[i-1][j];
                else grid[i][j] += min(grid[i-1][j], grid[i][j-1]);
            }
        }
        return grid.back().back();
    }
