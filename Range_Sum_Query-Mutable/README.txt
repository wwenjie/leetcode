307. 区域和检索 - 数组可修改
https://leetcode-cn.com/problems/range-sum-query-mutable/

medium

线段树
	复杂度，建树O(n)，查询修改O(logn)



问题：
	线段树为什么开4倍空间？
	https://www.cnblogs.com/Zeronera/p/11707603.html


笔记1：
	能用线段树的场景，
		区间数字之和 = 左右区间之和
		最大公因数GCD = 左区间gcd + 右区间gcd
		最大值 = max(左区间最大值，右区间最大值)
		一个问题，只要能化成对连续点（连续区间）的修改和统计问题，基本就能用线段树解决
	不能用的场景：
		众数
		01序列的最长连续0
参考1：
	https://blog.csdn.net/zearot/article/details/48299459


笔记2：
	这是一道很经典的题目，通常还能拓展出一大类问题。
	针对不同的题目，我们有不同的方案可以选择:
		1. 数组不变，求区间和：「前缀和」、「树状数组」、「线段树」
		2. 多次修改某个数，求区间和：「树状数组」、「线段树」
		3. 多次整体修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间的数据范围）
		4. 多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间的数据范围）

	这样看来，「线段树」能解决的问题是最多的，那不是任何情况都写「线段树」，
	只有在我们遇到第 4 类问题，不得不写「线段树」的时候，我们才考虑线段树。
	因为「线段树」代码很长，而且常数很大，实际表现不算很好。
	
	总结一下，我们应该按这样的优先级进行考虑：
		1. 简单求区间和，用「前缀和」
		2. 多次将某个区间变成同一个数，用「线段树」
		3. 其他情况，用「树状数组」

参考2：
	https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/
