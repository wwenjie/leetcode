1. 两数之和 easy
法1 暴力遍历空间O(n^2)
法2 用map<num, 下标>，时间O(n)
2. 两数相加 mid
实际很简单
3. 无重复字符的最长子串 mid
滑动窗口，自己写，不难
4. 寻找两个正序数组的中位数 hard
法1：easy，合并2个数组，返回中间的值，时间O(n+m)
法2：hard，二分法，取中位数下标k=(m+n)/2，
        每次比较nums1[k/2]和nums2[k/2]，
        把较小的数组中的前k/2个数删掉，
        然后k = k - k/2，继续循环，直到k==1或者其中一个数组遍历完
5. 最长回文子串 mid
法1：动态规划，O(n^2)，自写
法2：中心扩展，O(n^2)，没看
法3：manacher算法，马拉车算法，没看，是竞赛级别的算法
11. 盛最多水的容器 mid
双指针，不断把高度低的一边下标往内收，O(n)
15. 三数之和 mid
排序+双指针，自己写的有些情况没考虑到
找nums[a] + nums[b] + num[c] == 0的组合，排序后遍历nums取a=i，然后双指针，b=a+1，c=n-1，b和c指针往内收缩
时间O(N^2)，空间O(logN)，sort()使用的空间
18. 四数之和 mid
做法和15. 三数之和一样，加上一些细节判断可优化性能
时间O(N^3)，空间O(logN)，sort()使用的空间
19. 删除链表的倒数第 N 个结点 mid
法1：遍历2遍，第一遍取总长度，第二遍删除
法2：栈
法3：dfs递归，很多地方可以用！
法4：双指针
法5：自写，遍历存    vector
21. 合并两个有序链表easy
法1 迭代，  法2 递归，非常典型的迭代和递归题
做完这题再做148. 排序链表
22. 括号生成
递归，自己想的，比标准答案简单
24. 两两交换链表中的节点 mid
自写，跟标案差不多
25. K 个一组翻转链表 hard
标记上一组的尾节点，本组的收尾节点，再在本组首尾节点间反转即可，时间O(n)
自写把最后一组也排序了，不对，瞄一眼标案的2个函数名自写，跟标案基本一样
26. 删除有序数组中的重复项 easy
双指针
32. 最长有效括号 hard
动态规划，dp[i]表示i下标结尾的最长有效括号的长度
if (s[i] == ')') {
    if (s[i-1] == '(') { // 最后2个字符为'()'结尾
        dp[i] = (i>2 ? dp[i-2]:0) + 2;
    }
    else if (s[i-1] == ')') { // 最后2个字符为'))'结尾
        if (dp[i-1] > 0 && i-dp[i-1]-1 >= 0 && s[i-dp[i-1]-1] == '(') {
            dp[i] = dp[i-1] + 2;
            if (i-dp[i-1]-2 >= 0)
                dp[i] += dp[i-dp[i-1]-2];
        }
    }
}
34. 在排序数组中查找元素的第一个和最后一个位置
二分查找，我写的方法极端情况时间复杂度会退化成O(n)，
标准答案分别计算left_idx和right_idx，分别是最迫近target的下标，如果nums[left_idx]!=target 就返回找不到，right_idx也一样
37. 解数独 hard
自写，dfs递归 + 回溯 + 状态压缩，时间击败67%
43. 字符串相乘 mid
这题很难，做了好久，完成了一大半，关键是先反转字符串，这样比较好算，后面再反转回来，有空再做一遍，TODO（忘记了几时的笔记）
2024.08.14，不管这里的乘法题还是加法题，每位数都乘完（可能>10），到最后再统一处理每一位的进位，这样好做非常多
44. 通配符匹配 hard
法1 递归，超时
法2 递归，截取string优化为传下标，也超时
法3，迭代+只有*号时递归，还是超时
法4，二维dp，自己没做出来，本题可以对比下弄dp[n][m]和dp[n+1][m+1]的区别，时间O(nm)，空间O(nm)
有空再继续做
49. 字母异位词分组
sort对字符串排序，然后放到map里，map的key是排序后的字符串，val是排序前的字符串
41. 缺失的第一个正数 hard
法1，自写，桶排序取[1,n]之间的数，遍历一遍即可，时间O(n)，空间O(n)，不满足空间O(1)的要求
法2，标案，思路同上，因为是原地修改，注意对加过负号标记的数据重复加标记的情况。
1 先把负数改位n+1，
2 然后桶排序阶段是原地在nums上加负号标记，比如遍历到3，就在nums[2] 加个负号，表示3存在
3 最后再遍历一遍nums，遇到nums[idx] > 0，就返回idx+1
43. 字符串相乘 mid
抄的，自己也能写出来，但是很难写的比标案优雅
48. 旋转图像 mid
法1：用一个辅助数组
法2：4个下标的数据 加一个临时变量互转
法3：2次翻转，水平翻转再根据对角线翻转，就相当于旋转90度
50. Pow(x, n) mid
法1：快速幂 + 递归，O(logn)
法2：快速幂 + 迭代，O(logn)
法3：快速幂 + 迭代 + 位运算，O(logn)，比法2好理解
有点难，自写O(n)超时
51. N 皇后 hard
回溯法。看提示说用回溯法后，自己写的
时间O(n!)，空间O(N) 空间复杂度在于递归调用层数、queens列下标、3个set集合，递归调用层数不超N，vector、set的元素数量不超N
在自己答案基础上的可做优化：
a.原本dfs()函数通过复制传递vector<string> board，增加剪枝操作后，可以用引用传递
b.可以用vector<int> queens(n,-1)表示每行皇后的位置，最后push_back到res里的时候再构造vector<vector<string>>
c.用unordered_set<int> colums表示哪些列被皇后占用了，降低checkCol()复杂度为O(1)
d.用2个unordered_set<int>分别表示左斜线和右斜线有没被占用，做法比较巧妙，行列为(row, col)按左斜线映射到第一行的坐标为(0，col-row)，以col-row作为key即可，比如第1行(0,1)有皇后，unordered_set的key是1，第3行(2,3)的key也是1就不能有皇后。这样可降低checkDiagonal()的复杂度为O(1)
e.第3、4点优化，可以继续用位运算来优化。
52. N 皇后 II hard
回溯法。按位运算。
时间O(N!)，空间O(N)，空间复杂度取决于递归调用层数，不超N
在做完51题的基础上，完全自己写。
用时0ms击败100%c++用户，内存6.95MB，击败93%c++用户
54. 螺旋矩阵 mid
法1：直接模拟
法2：记录已经遍历过的元素，到边界或到记录过的元素就转向
法3：重新设定上下边界
58. 最后一个单词的长度 easy
从后往前遍历
61. 旋转链表 mid
时间O(n)，空间O(1)
自己写出来的，不过标案更好，关键在于遍历次数 = len - (k % len)
66. 加一 easy
简单，自写，注意9+1=10
68. 文本左右对齐 hard
完全自写，直接模拟
70. 爬楼梯
法1 递归，超时；
法2 dp，时间O(n)，空间O(n)
法3 迭代，滚动数组，时间O(n)，空间O(1)
72. 编辑距离 mid
dp动态规划，刚开始没思路，看了眼标案后自写
定义dp[ i ][ j ]为word1和word2中的下标
状态转移：dp[i][j] = dp[i-1][j-1]，字符相同
            dp[i][j] = dp[i][j-1] + 1，加一个字符
            dp[i][j] = dp[i-1][j] + 1，删一个字符
           dp[i][j] = dp[i-1][j-1] + 1, 改一个字符
75. 颜色分类 mid
双指针，遍历到0就swap，得到n个0，然后从下标n继续遍历，遍历到1就swap
76. 最小覆盖子串 hard
法1：滑动窗口，自写，时间O(字符集数 * s_len + t_len)，跟标案一样
法2：时间O(s_len + t_len)，增加一个辅助变量less，表示还缺的字符数
78. 子集 mid
递归，复杂度O(n*2^n)，有空看下标案todo
92. 反转链表 II mid
看了标案图解后自写，O(n)
反转范围是left-right，定义left_pre、left、right、right_next 4个指针做特殊处理
94. 二叉树的中序遍历 easy
递归easy自写、迭代 难一点
101. 对称二叉树 easy
法1 递归； 法2 迭代
103. 二叉树的锯齿形层序遍历 mid
跟116差不多，用deque双端队列
112. 路径总和
dfs、bfs、栈、队列
115. 不同的子序列 hard
动态规划dp，完全自写，跟标案基本一样，nb，时间O(nm)
116. 填充每个节点的下一个右侧节点指针 mid
法1 bfs ，法2 层序遍历，自写，很简单
121. 买卖股票的最佳时机 easy
只能买一次，卖一次
法1 暴力法，O(n^2)超时
法2 遍历一次，保存前面的min_price，时间O(n)
法3 单调栈，意义不大，还不如法2
122. 买卖股票的最佳时机 II mid
可以买卖无限次
法1 贪心，自己写的
法2 dp，不是很理解
状态定义：
dp[i][j]  第i天，j=0/1是否持有股票，手上持有的最大现金数
转台转移方程：
dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
        dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
初始值：dp[0][0] = 0，dp[0][1]=-price[0]
123. 买卖股票的最佳时机 III
最多完成2笔交易
法1：标案dp，时间O(n)，空间O(1)，还不是太理解
定义：buy1第一次买，sell1第一次卖，buy2第二次买，sell2第二次卖
状态转移方程：
buy1 = max(buy1, -price[i])
sell1 = max(sell1, buy1 +price[i])
buy2 = max(buy2, sell1 - price[i])
sell2 = max(sell2, buy2 + price[i])
法2：局部最优和全局最优解法dp （以前我写的，但没看懂）
定义状态：
1. 到第 i 天最多进行j次交易，最高利润为 global[i][j]
2. 到第 i 天最多进行j次交易，且最后一次交易在当天卖出，最高利润为 local[i][j]
状态转移方程：
全局最优解 global[i][j] = max(global[i-1][j], local[i][j])
局部最优解 local[i][j] = max(global[i-1][j-1] + max(diff, 0), local[i-1][j] + diff)，diff=price[i]-price[i-1]
124. 二叉树中的最大路径和 hard
法1：自写，时间O(n^2)，cpu击败5.7%，
maxPathSum()递归，让每个节点都执行一次计算该节点的路径和calRootSum()
calRootSum()中，用dfs()计算左右子节点的sum，只有>0才采用，
dfs()中只取左右节点的较大值
法2：标案，时间O(n)
129. 求根节点到叶节点数字之和 mid
自己做出来，dfs即可，法2是bfs，没看
135. 分发糖果 hard
法1：自写，耗时击败100%，内存击败90%，递减序列的第一项，要做一些特殊判断，看是否要糖果数+1。
法2：官方标案1，分别左到右和右到左遍历2遍，计算每个下标，满足左规则和右规则时需要的糖果数，取较大值，很巧妙。
法3：官方标案2，跟我自写的法1类似，要维护一个上一段递增序列的长度inc_cnt，和这段递减序列的长度dec_cnt，下图好理解。

141. 环形链表 easy
法1 hash，法2 快慢指针
142. 环形链表 II mid
基本同上，快慢指针会复杂一点
143. 重排链表 mid
非常经典！重点是法2！涉及快慢指针、翻转链表、合并链表
法1：放到vector，双指针分别从2头向中间遍历，时间O(n)，空间O(1)
法2：a.快慢指针找到链表中点
         b.翻转后半链表
         c.双指针分别从头和中点往后遍历
         时间O(n)，空间O(1)
144. 二叉树的前序遍历 easy
法1 迭代 栈，法2 递归
父节点->左子节点->右子节点
145. 二叉树的后序遍历 easy
法1 递归 很简单，自写
法2 迭代，栈，很难，抄的，有空再试下todo
148. 排序链表 mid
先做21. 合并两个有序链表
快排可能会降级成O(n^2)，最合适的是归并排序O(nlogn)
先快慢指针选出中间节点，再递归分治，最后合并有序链表
153. 寻找旋转排序数组中的最小值 mid
自写，O(logn)，二分查找，递归、迭代
155. 最小栈
法1：自己写，stack + multiset，先find后erase可以删一个val，直接erase会删全部val
法2：标准方案，弄一个辅助stack，每项对应原stack前面的最小值。
160. 相交链表 easy
法1：unorder_set<node*>，两边同时遍历，出现重复就是交点
法2：巧妙做法，两边各自遍历，如果到了尾部，则从另一个链表头开始遍历，
        假设A链表长度为（a+c），B链表长度为（b+c），则各自遍历了(a+c+b)和(b+c+a)个节点时会相交；
        如果本身A和B不相交，那第2次遍历的时候会各自遍历到2个链表的尾部
164. 最大间距 mid
法1：基数排数，时间O(n)，空间O(n)
法2：桶排序，时间O(n)，空间O(n)
187. 重复的DNA序列 mid
法1：map
法2：滑动窗口+字符串哈希（rabin-karp算法），多项式计算还可优化成用数组
188. 买卖股票的最佳时机 IV
法1：dp，2个二维数组
初始化：
            buy[0][k] = -prices[0]，sell[0][k] = 0
            buy[i][0] = 0，sell[i][0] = 0
        状态转移方程：
            buy[i][k] = max(buy[i-1][k], sell[i-1][k-1] - prices[i])
            sell[i][k] = max(sell[i-1][k], buy[i-1][k] + prices[i])
法2：dp，1个三维数组，第三维度只有2个状态
初始化
dp[i][0][0]=0，dp[0][k][0]=0，
dp[0][k][1]=-prices[0]，dp[i][0][1]=max(dp[i-1][0][1], -prices[i])
状态转移方程：
dp[i][k][s] , 第i天完成k笔交易的最高收益,s=0/1表示未持有/持有状态
dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])
dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k-1][1] + prices[i])
189. 轮转数组 mid
法1，简单，自己写的，用临时数组 easy
法2，没理解，循环替换
法3，翻转数组，funny
191. 位1的个数 easy
自己写的，太简单
198. 打家劫舍 mid
dp，自己写的，时间O(n)，空间O(1)
状态转移方程dp[i] = max(dp[i-1], dp[i-2] + nums[i])
200. 岛屿数量 mid
法1：dfs，自写，简单，时间O(mn)
法2：并查集
206. 反转链表
法1：栈，时间O(n)，空间O(n)
法2：迭代 & 双指针，时间O(n)，空间O(1)，while循环维护prev、curr、next3个指针
法3：递归，时间O(n)，空间O(n)，有点难理解，理解后就豁然开朗，可以回头再看看
207. 课程表 mid
法1：自写，从prerequisites任意一个课程出发dfs，如果出现重复遍历到同一个课程，就返回false，如果遍历到不在prerequisites的课程就继续下一个起点
法2：看思路后自写，维护一个入度数组，入度为0表示无依赖，用queue做bfs，不断把入读为0的课程放入queue，出queue时对依赖本课程的课程减入度，while循环结束后仍有入读不为0的课程，就返回false
211. 添加与搜索单词 - 数据结构设计 mid
法1：字典树，自写，代码基本一样
213. 打家劫舍 II mid
自己做出，在198. 打家劫舍的基础上，执行2遍 rob(nums, 0, size-2) 和 rob(nums, 1, size-1)，取较大值即可
214. 最短回文串 hard
法1：rabin-karp算法，O(n)，抄的
法2：kmp算法，O(n)，TODO
216. 组合总和 III mid
自写，dfs
218. 天际线问题 hard
基础数据结构-有序集合
priority_queu大顶堆，O(nlogn)
我思路出来了，但没写出来，答案是遍历所有顶点，在循环里遍历buildins，我是反过来，所以没写出来
226. 翻转二叉树 easy
递归
229. 多数元素 II mid
摩尔计数法，有1-配对抵消阶段和2-计数阶段。时间O(n)，空间O(1)
自写的用map计数空间O(n)，看答案思路后自写了摩尔计数法，不难
230. 二叉搜索树中第 K 小的元素 mid
法1：递归中序遍历全部，自写，时间O(n)
法2：标案，迭代-中序遍历-栈，略难
234. 回文链表 easy
法1：放到vector里，再双指针同时从前后遍历
法2：递归，做法很绕，还要一个类成员变量协助
法3：快慢指针，代码更长，没看
235. 二叉搜索树的最近公共祖先
递归，跟236一样
236. 二叉树的最近公共祖先
递归，跟235一样
237. 删除链表中的节点 mid
阅读理解题，2行代码，cur->val = cur->next->val；cur->next = cur->next->next；
238. 除自身以外数组的乘积 mid
法1：自写，时间O(n)，空间O(n)，2个辅助数组，左右成绩列表
法2：看到进阶空间O(1)后自写，时间O(n)，空间O(1)
283. 移动零
1 双指针法
2 遍历一次，不等于0的则原地赋值到数组前面，同时计算0的个数，数组后面0的个数的元素全部赋值0
239. 滑动窗口最大值
法1：用优先队列priority_queue（堆），窗口滑动时只删top中在窗口外的元素，直到top是窗口内的，堆中在窗口外的而且不是top的元素不着急删
法2：单调队列。
a.维护一个降序排列的单调队列，用单调队列，因为既要处理队头也要处理队尾
b.for(i=k; i< nums.size(); ++i)
i.while循环判断队列是否为空，且队尾元素<新元素nums[i]，则pop_back()
ii.在单调队列末尾push_back(i)加入新元素到单调队列
iii.while循环判断队头元素是否在滑动窗口内，deque.top() < i-k 则pop_front()
iv.res.push_back(deque.front())
法3：没仔细看，类似稀疏表，有空可看
274. H 指数 mid
自写，太简单，大到小排序，遍历if (nums[i] < i+1) 就返回 i 即可。
279. 完全平方数 mid
法1 我写的dp，状态转移方程dp[i] = min(dp[i], dp[j] + dp(i-j)) 且 1 <= j < i，时间O(n^2)
法2 标准方法dp，状态转移方程dp[i] = min(dp[i], dp[i - j * j] + 1) 且1 <= j*j <= i，时间O(n*根号(n))
        vector<int> dp(n+1);
        for (int i=1; i<=n; ++i) {
            dp[i] = n;
            for (int j=1; j * j <= i; ++j) {
                dp[i] = min(dp[i], dp[i - j * j] + 1);
            }
        }
法3 数学方法，没看
287. 寻找重复数 mid
技巧题todo
法1：自写，排序后判断是否出现连续重复，时间O(nlogn)
标案法1：二分查找O(nlogn)
标案法2：二进制，O(nlogn)
标案法3：快慢指针，floyd判圈算法
289. 生命游戏 mid
法1：自写，拷贝一个新的board再模拟，再swap
法2：标案，在原有0/1状态外，增加新的状态值，或者用第2个bit位表示新的死活，最后再右移1位
295. 数据流的中位数 hard
法1：自写，跟标案一样，用2个堆，大顶堆和小顶堆分别维护前半数据和后半数据，插入O(logn)，查询O(1)
法2：有序集合multiset + 双指针，有空看下
300. 最长递增子序列
法1：dp，2个for循环，状态转移方程 dp[i] = max(dp[i], dp[j] + 1)，且  0 <= j < i 且 nums[j] < nums[i]
法2：贪心+二分查找
法3：线段树，自写，跟其他人写的线段树不一样，有空看下todo
303. 区域和检索 - 数组不可变 easy
前缀和
307. 区域和检索 - 数组可修改 mid
法1：线段树，自写，构造O(n)，update O(logn)，sumRange O(logn)
法2：树状数组，抄的标案，感觉不好用，不好理解todo，可看csdn博客-树状数组
309. 买卖股票的最佳时机含冷冻期 
法1：dp，时间O(n)，空间O(n)
第i天,未持有状态 sell[i] = max(sell[i-1], buy[i-1] + prices[i])
第i天，持有状态 buy[i] = max(buy[i-1], sell[i-2] - prices[i])
（标案中，滚动数组法，可将空间优化为O(1)）
310. 最小高度树 mid
法1 bfs，自写，O(n^2)超时，算出每个节点作为根时的高度
法2 从任意1个节点bfs找到最深叶子x，再从x bfs找到最深叶子y，则x到y的中点就是答案
322. 零钱兑换
法1：dp，自己写的，跟标准答案基本一样，时间O(总金额*硬币数)，空间O(总金额)
法2：记忆化搜索，不懂，时间空间复杂度同上
331. 验证二叉树的前序序列化 mid
todo，没思路，直接看标案
法1：栈。自底向上，把叶子节点4##替换成#，入栈，看是否满足
法2：计算入读出读。从前往后遍历，每个节点diff = 入读-出度>=0，到最后diff==0
每个#节点提供1个入度和0个出度，
每个非#节点提供1个入度和2个出度，
根节点0入度2出度
337. 打家劫舍 III mid
dp、记忆化搜索、递归
竟然不是hard题，看了点答案提示和状态转移方程，自己写的法1超时了，加上记忆化搜索的优化后，通过了，跟标案不一样
法1 超时了，递归
选择root，doRob(root) = noRob(l) + noRob(r);
不选择root，noRob(root) = max{(doRob(l), noRob(l)} + max{doRob(r), noRob(r)}
法2 递归+记忆化搜索 （也属于dp）
在法1的基础上加上，记录每个节点doRob或noRob的结果的map。防止相同节点在不同分支重复计算
执行用时超37%用户，时间O(n)，空间O(n)
法3 dfs+记忆化搜索（也属于dp）（跟标案一样）
在法2的基础上，去掉了doRob、noRob函数，沿用那2个map
执行时间超6%用户，性能竟然比法2低，时间O(n)，空间O(n)
365. 水壶问题 mid
刚看没头绪，看答案发现是数学问题，继续看提示后自写dfs+记忆化搜索
法1，经典的die hard倒水数学问题
2个壶能量出的水量一定是2个壶容量的最大公约数的倍数，可通过辗转相除法求最大公约数
时间O(log(min(x,y)))，即辗转相除法的复杂度
法2：dfs + 记忆化搜索
自写，时间O(xy)，因为状态数最多(x+1)*(y+1)种，对所有状态dfs
373. 查找和最小的 K 对数字 mid
优先队列，priority_queue
priority_queue< pair<int,int>, vector<pair<int,int>>, decltype(cmp)> pq(cmp);
时间O(klogk)，做法很巧妙，正常做法O(klogk) + O(k^2)
1 把下标(1,0)...(n,0) emplace进去
2 while循环把top()节点(x,y) pop出来，再把(x, y+1) emplace进去
377. 组合总和 Ⅳ mid
法1：dp 爬楼梯问题
初始 dp[0] = 1，状态转移方程 dp[i] += dp[i-num]
法2：dfs + 记忆化搜索
380. O(1) 时间插入、删除和获取随机元素 mid
法1：自写，unordered_set，通过了，但getRandom()复杂度实际是O(n)
法2：标案，vector<val> + unordered_map<val, idx>，getRandom()复杂度O(1)
自写的2种生成随机数算法：
// 法1：c++11 及更高版本用
#include <random>
int getRandom() {
    // 1 创建随机数引擎和分布
    std::random_device rd;  // 随机数设备，用于获取种子
    std::mt19937 gen(rd()); // 以随机设备作为种子的Mersenne Twister生成器
    std::uniform_int_distribution<> dis(0, uset.size() - 1); // 均匀分布的整数

    // 2 生成随机索引
    size_t random_index = dis(gen);
    
    // 3 用随机索引访问 unordered_set 的元素
    // 因为unordered_set无序，所以要遍历容器来获取随机索引对应的元素
    auto it = uset.begin();
    std::advance(it, random_index); // 移动迭代器到随机位置
    return *it;
}
// 法2：c++03及更低版本用
#include <cstdlib> // 
#include <ctime>   // time()
int getRandom_2() {
    // time()相同的时间戳种子，产生的一批随机数是一样的。
    srand((unsigned)time(NULL))
    int random_index = rand() % uset.size();
    auto it = uset.begin();
    std::advance(it, random_index); // 移动迭代器到随机位置
    return *it;
}
383. 赎金信 easy
太easy
394. 字符串解码 mid
法1：栈，自写，时间O(n)
法2：递归，有空试下todo
395. 至少有 K 个重复字符的最长子串 mid
法1：分治，自写，跟标案基本一样，O(n*递归深度) 递归深度最多26
法2：滑动窗口
404. 左叶子之和 easy
自写，简单，dfs递归、dfs栈迭代、bfs队列迭代
429. N 叉树的层序遍历 mid
很简单，自写，bfs，queue
438. 找到字符串中所有字母异位词
容易被49题误导
实际用滑动窗口
454. 四数相加 II mid
时间O(n^2)，分2组，用map存第一组的所有num1+num2的结果，遍历num3+num4时去查map
456. 132 模式 mid
不简单，自写的答案O(n^2)，超时
法1 枚举i，单调栈，右往左遍历（高赞那个答案不错），时间O(n)
法2 枚举j，用multiset和upper_bound，时间O(nlogn)
法3 枚举k，标案说很复杂，没看
459. 重复的子字符串 easy
法1：技巧
法2：kmp，尝试理解后自写了一遍，TODO
464. 我能赢吗 mid
dfs + 记忆化搜索
自写没写出来，答案有个巧妙的地方是dfs()中，循环调下一层是判断 dfs() == false 就返回成功。
509. 斐波那契数 easy
法1 递归（自顶向下）
法2 借助p/q/r 3个参数一直迭代（自底向上）
516. 最长回文子序列 mid
dp，边界条件 s[i][i] =1，其他初始化为0；
状态转移方程：
        若 s[i]==s[j], 则dp[i][j] = dp[i+1][j-1] + 2
        若 s[i]!=s[j], 则dp[i][j] = max(dp[i+1][j], dp[i][j-1])
（516的精选答案，一目了然）
时间O(n^2)，空间O(n^2)
518. 零钱兑换 II mid
法1：dfs，自己写的，注意零钱不能重复算，时间超限
法2：dp，完全背包问题（写出来不知道错了哪里，运行有个测试用例不对）
前i个硬币，凑成j总金额，组合数 
dp[i][j] = dp[i-1][j] + dp[i][j-coins[i]]
如果是01背包问题，才是这样写
dp[i][j] = dp[i-1][j] + dp[i-1][j-coins[i]]
法3：dp，类似爬楼梯问题，但算的是组合数，而不是排列数
3.1 算排列数，不同amount，硬币可以重复算，比如amount=3，(1,2)和(2,1)都算
for (int i=1; i<=amount; ++i) {
for (int coin: coins) {
dp[i] += dp[i-coin];
3.2 算组合数，amount=3，则只算(1,2)，本题要这么做
for (int coin: coins) {
for (int i=coin; i<=amount; ++i) {
dp[i] += dp[i-coin];
522. 最长特殊序列 II mid
没思路，抄的，容易被题目误导思路。时间O(n^2 * len)
1 实际只要取出最长的字符串（肯定不是其他字符串的子序列），
2 如果1不满足，有多个一样是最长的字符串，判断互不相等就可以
3 如果1,2都不满足，O(n^2)双层循环遍历每个字符串，只是不是其他字符串的子串就行
526. 优美的排列 mid
法1 回溯，耗时击败8%，时间O(n!)
法2 回溯 + 状态压缩，耗时击败19%，时间O(n!)
法3 回溯 + 状态压缩 + 记忆化搜索，耗时击败79%，时间复杂度O(n!)
法4 动态规划 + 状态压缩，耗时击败67%，时间复杂度O(2^n * n)，理论上应该是dp最快
法1-法3自写，法4看答案才能理解。本题经典！！
543. 二叉树的直径 easy
dfs，
递归，计算每个节点的深度，每个节点的深度depth(root)=max(depth(root->left), depth(root->right)) + 1;
关键点在于另外定义个ans，ans = max(ans, depth(root->left) + depth(root->right))
552. 学生出勤记录 II hard
自写3维dp，思路跟标案差不多，不过自写的状态转移思路优点不一样，自写的先看当前状态，标案先看最后一个字符再看当前状态。
定义：dp[i][j][k] 表示计算到第i个字符时，当前状态是j个absent和连续k个late
状态转移：
P结尾，dp[i][j][0] = dp[i-1][j][k]
A结尾，dp[i][1][0] = dp[i-1][0][k]
L结尾，dp[i][j][k] = dp[i-1][j][k-1] 
589. N 叉树的前序遍历 easy
1-递归，自己写很简单，2-迭代，很难，有空试写下
605. 种花问题 easy
简单，贪心，关注边界问题
638. 大礼包 mid
看题目一点思路都没有，有空再做一次，TODO
记忆化搜索 + dfs
思路：
定义记忆化map：map<vector<int>, int> memo; // needs 对应的 min_price
dfs(prices, specials, needs)函数：
i.if (memo.count(needs) 就返回 memo[needs]
ii.for循环遍历每个礼包，needs 减去 礼包内各物品数
1.min_price = min(min_price, sp_price + dfs(prices, specials, new_needs))
iii.memo[needs] = min_price
646. 最长数对链 mid
法1：dp，自写，O(n^2)
        dp[i] = max(dp[i], dp[j]); j=[0,i-1)
法2：参考300.最长递增子序列做法，贪心+二分查找lower_bound
（自写的连二分查找lower_bound也不需要）
        先根据pair[0]排序，O(nlogn)，todo有空试下
法3：贪心，根据pair[1]排序，O(nlogn)，todo有空试下
654. 最大二叉树 mid
分治法(递归)，自己写的，不难
时间O(n^2)，最坏情况是数组严格递增/递减，需要递归n层，第i层要遍历n-i个元素找出最大值
空间O(n)，最坏情况下使用的栈空间
法2：单调栈，没看
673. 最长递增子序列的个数 mid
简直就是一个hard题
做完300. 最长递增子序列 后，对这道题有思路，但很多细节情况没处理对，要一直看答案才写得出来。
680. 验证回文串 II easy
时间O(n)，分别从字符串左右两边向中间遍历，if(s[l] != s[r]) return check(s, l, r-1) || check(s, l+1, r);
691. 贴纸拼词 hard
法1： dfs + 记忆化搜索，自写，但不知道错在哪里，只通过53/101的case
定义的map<vector<int>, int>memo; // state作为key 有问题，
改成 map<pair<int, vector<int>>> memo; // make_pair(used_cnt, cur_state) 作为key就好
法2：dfs + 记忆化搜索，自写，按上面的修改，超时，通过64 / 101 个case
法3：法2的基础上改成  map<pair<int, string>> memo; // make_pair(used_cnt, cur_state_str)，通过71 / 101个case，在本地自测比法2 耗时降低了一半。
法4：bfs + 记忆化搜索 + 状态压缩，因为dfs算了太多没用的分支，所以dfs超时
法5：动态规划
698. 划分为k个相等的子集 mid
法1：排序+贪心，自写的思路应该也是对的，但是执行不对，有空调试下
法2：dfs+记忆化搜索+状态压缩，看完答案后半自写，删掉记忆化后会超时
714. 买卖股票的最佳时机含手续费 mid
法1：dp，自己写的
第i天未持有股票的收益 dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
第i天持有股票的收益 dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)
法2：贪心，没看标案
715. Range 模块 hard
法1：半抄的，思路对的，map + upper_bound + prev(it)
法2：线段树，struct Node中，bool cover表示这一段是否区间内，int add 懒标记是精髓，1表示左右子节点需要被更新为跟踪状态，-1表示左右子节点需要被更新为非跟踪状态，0表示子节点不需要被更新，但是超出内存限制，参考：线段树题目汇总详解 和 ylb的c++线段树题解，前者是java，后者如果去掉对象池CacheObj的代码也会超出内存限制
724. 寻找数组的中心下标 easy
前缀和，自写，极简单
729. 我的日程安排表 I mid
法1：map+upper_bound，自写
法2：线段树，自写思路正确，Node的定义有点不对，不能是bool book表示l~r范围内有无预定过，要定义成int book_days
法3：存vector，二分查找，懒得写
731. 我的日程安排表 II mid
法1：线段树+懒标记，自写，O(n*log(1e9))
法2：差分数组map，O(logn^2)，很巧妙，map的key是日期，遍历map累加即得原始数组的值，判断是否>2

739. 每日温度
单调栈，自己写出来的，时间O(n)，空间O(n)
740. 删除并获得点数 mid
第一次看毫无思路，看提示跟198. 打家劫舍 一样的做法。
做完198打家劫舍后，自己就做出来了。
时间O(NlogN)，其中排序时间O(NlogN)，遍历时间O(N)，
空间O(N)
746. 使用最小花费爬楼梯
法1 dp 时间O(n)，空间O(n)
法2 滚动数组，迭代 时间O(n)，空间O(1)
763. 划分字母区间 mid
贪心，自写，维护每个字符最后出现的位置下标，维护字符串片段中所有字符最晚出现的位置下标
815. 公交路线 mid
bfs，时间O(n)，原本自写dfs超时，看答案提示bfs后自写
862. 和至少为 K 的最短子数组 hard
法1：自写，滑动窗口，错误
如果nums中元素全为正，那可以用滑动窗口，但如果nums可以为负，窗口失去单向性，所以不能用滑动窗口。
法2：标案，单调队列 todo
889. 根据前序和后序遍历构造二叉树 mid
看答案提示后自写，递归O(n)
901. 股票价格跨度 mid
单调栈
知道是单调栈后，轻松自写
983. 最低票价 mid
这道mid题好难，自己写的不对
从前往后推导dp，参考【微扰理论】 从前往后一维dp
有人提到了解刷表法（自顶向下）和填表法（自底向上）的区别
994. 腐烂的橘子 mid
法1：自写，直接逻辑模拟，时间O(nm*分钟数)
法2：多源bfs，把所有腐烂橘子先放入queue，然后不断层序遍历bfs，时间O(nm)
1014. 最佳观光组合 mid
法1：暴力法O(n^2)，自写
法2：标案，技巧、脑经急转弯，res = A[i] + A[j] + i - j = (a[i] + i) + (a[j] - j)，根据 j 遍历一次，维护一个pre_max = a[i] + i 即可
1035. 不相交的线
dp，先做的1143题
答案跟1143题一毛一样，完全自己写
1044. 最长重复子串 hard
rabin-karp算法+二分查找 todo
自己的想法都超时，遍历+字典树O(n^3) ，遍历+map O(n^2 * logn)
看标案看懂了，rk算法时间O(n)，二分查找log(n)，先查有无n/2长度的重复字符串，有则查n*3/4长度的，无则查n/4长度的。
1046. 最后一块石头的重量 easy
priority_queue<int> 最大堆，自写
1049. 最后一块石头的重量 II mid
参考：https://leetcode.cn/problems/last-stone-weight-ii/solutions/805162/yi-pian-wen-zhang-chi-tou-bei-bao-wen-ti-5lfv/
法1：前i个石头能否凑出重量j：
            dp[ i ][ j ] = dp[ i-1 ][ j ] || dp[ i-1 ][ j - stones[ i ] ]
法2：前i个石头，剩余背包重量j，可以取到的最大重量：
           dp[ i ][ j ] = max(dp[ i-1 ][ j ], dp[ i-1 ][ j - stones[ i ] ] + stones[ i ]);
1094. 拼车 mid
差分数组，可以用vector也可以用map，
用vector空间换时间，用map时间换空间，map写入复杂度log(n)
差分数组：用于区间修改操作，只需要修改区间边界值，避免遍历，以空间换时间
1137. 第 N 个泰波那契数
法1 递归（时间超限）
法2 迭代dp，同509题
1143. 最长公共子序列 mid
dp，自己只写错了一丢丢
    定义：dp[i][j]表示test1前i个字符和test2前j个字符的最长公共子序列
    状态转移方程：    dp[i][j] = dp[i-1][j-1] + 1, if test1[i] == test2[j]
                         dp[i][j] = max(dp[i-1][j], dp[i][j-1]), if test1[i] != test2[j]
    时间O(mn)，空间O(mn)
1155. 掷骰子等于目标和的方法数 mid
法1：dfs递归 + 记忆化，自写，时间O(n*k*target)
法2：dp，自写，时间O(n*k*target)
法3：终极优化，时间优化用前缀和O(n*target)，空间优化压缩成一维数组O(target)，todo
1184. 公交站间的距离 easy
法1：自写，前缀和，时间O(n) ，（前缀和：用于O(1)复杂度完成区间查询）
法2：标案，更简单，遍历一遍distance，在start~destination之间和不在之间都分别算个距离d1\d2，返回较小值即可，时间O(n)
1227. 飞机座位分配概率 mid
略难，有规律的递推
2306. 公司命名 hard
自写的暴力遍历超时了，
标案：按首字母把所有字符串分组set<string> groups[26];
2332. 坐上公交的最晚时间 mid
这题自写很难写，觉得思路不对，就抄了，略难
思路：先模拟上车，到最后一辆车看还有无空位，
    有则从最后一辆车到达时间开始往前找不冲突的时刻；无则从最后一个乘客开始往前找可以插队的时刻
2376. 统计特殊整数 hard
没思路todo，数学+递归+记忆化搜索+位运算
2398. 预算内的最多机器人数目 hard
先做239题后才有思路
滑动窗口+deque单调队列，时间O(n)
2407. 最长递增子序列 II hard
法1 自写dp，O(n^3) 超时
法2 自写dp，O(n^2) 超时
法3 自写dfs + 记忆化，O(n^2)超时
法4 线段树，O(nlogn)，笔划推导后才理解
for(int i=0; i<n; ++i) { // 遍历nums构造线段树
    // 查下标i之前，num[i]-k到num[i]-1的线段的数字中，出现的最长序列长度
    int max_len = query(nums[i] - k, nums[i] -1);
    update(nums[i], max_len + 1);
}


2476. 二叉搜索树最近节点查询 mid
法1，自写，树dfs，评价呢复杂度O(n*logm)，但是如果树是一条链，复杂度降级成O(n*m)
法2，标案，dfs中序遍历将树转数组，再lower_bound(arr.begin(), arr.end(), num) 查找，复杂度O(n*logm)
2516. 每种字符至少取 K 个 mid
反向思维
2576. 求出最多标记下标 mid
脑经急转弯，将数组分2半，左边跟右边匹配，时间O(nlogn)在排序上
先入为主都是dp或dfs递归，都是不可以的
2583. 二叉树中的第 K 大层和 mid
简单，自写，层序遍历 queue
2741. 特别的排列 mid
竟然不是hard，做了我好久才理解
法1：记忆化搜索 + dfs
法2：记忆化搜索 + dp（有点还没太理解为啥这样写可行）
参考：wxquare的这个答案跟我很来电 
2816. 翻倍以链表形式表示的数字 mid
法1：翻转，*2，再翻转回来，时间O(n)
法2：直接遍历*2，只有下个节点>=5，才对本节点+=1；如果头接单>=5，就再加一个进位的头节点。
2844. 生成特殊数字的最少操作 mid
法1：贪心，自写跟标案基本一样
2867. 统计树中的合法路径数目 hard
埃氏筛 + dfs
自写超时O(n^2)
标案O(n)：
1.遍历所有质数，dfs得到从质数出发到非质数的所有路径，并记录路径的结点数，得到质数出发的路径数；
2.计算非质数出发的路径数，若质数a有3个非质数子节点，a到3个非质数子节点各有2，4，3个路径，则两两相乘再相加，就得到非质数出发的路径数。
2903. 找出满足差值条件的下标 I easy
法1：双层循环，时间O(n^2)遍历
法2：滑动窗口，维护左边窗口外的最大值和最小值，时间O(n)
3011. 判断一个数组是否可以变为有序 mid
脑筋类题目
法1：自写，冒泡排序，要交换时判断__builtin_popcount，时间O(n^2)
法2：按popcount分组，每一组比上一组的最大值大就行，时间O(n)
3102. 最小化曼哈顿距离 hard
不懂，自己做的话要O(n^2)超时，看答案要换成切比雪夫距离来算，可以做到O(nlogn)
3117. 划分数组得到最小的值之和 hard
回溯，思路是对的，但自写时间超限 todo
3132. 找出与数组相加的整数 II mid
判断有序数组nums2是否nums1的子数组，时间O(n)
3144. 分割字符频率相等的最少子字符串 mid
法1：dfs+记忆化，
法2：dp
时间都是O(n^2)，但自写时写不出来，todo
3152. 特殊数组 II mid
法1：动态规划，时间O(n+m)，dp[y] = dp[y-1] + 1, if (nums[y] % 2 != num[y-1] % 2) 
法2：map upper_bound，时间O(n+mlogn)
3154. 到达第 K 级台阶的方案数 hard
回溯+记忆化搜索
自写超时，跟标案的区别是我用vector记忆化，标案将(阶梯, jump, down)状态压缩后用map记忆化
3148. 矩阵中的最大得分 mid
dp，自写，思路跟标案一样，但标案写的更优雅
3164. 优质数对的总数 II mid
法1：自写，超时，枚举nums1和nums2 + 记忆化搜索
法2：枚举nums1中每个数的因子，map<因子，数量>，再遍历nums2，ans += map[n2]
3186. 施咒的最大总伤害 mid
基于值间隔的打家劫舍
法1：dfs + 记忆化搜索（不知为啥超时了，跟标案区别是标案是从后往前遍历，而我是从前往后遍历）
法2：动态规划
3264. K 次乘运算后的最终数组 I  easy
法1，简单，时间O(nk)，自写
法2，标案，时间O(nlogn +klogn)，priority_queue小根堆，元素是数组idx，比较函数比较nums[idx]的值
auto cmp = [&nums](int i, int j) {
    return nums[i] == nums[j] ? i > j : nums[i] > nums[j];
};
priority_queue<int, vector<int>, decltype(cmp)> heap(cmp);
LCR 076. 数组中的第 K 个最大元素
法1，基于快排的快速选择，自己写的，提交后其中1个用例heap-buffer-overflow了，不知道错在哪里，自己的linux下执行反而没问题
法2，基于堆排
LCR 077. 排序链表 mid
法1 自顶向下归并排序，自写，时间O(nlogn)，空间O(logn)
法2 自底向上归并，有空看下，时间O(nlogn)，空间O(1)
面试题 10.05. 稀疏数组搜索
这样写不知道错在了哪里，点“运行”返回“heap-buffer-overflow”，自己在linxu里跑还是正常返回的
// 法2：二分查找
    int findString(vector<string>& words, string s) {
        if (words.empty()) return -1;
        int size = words.size();
        int left = 0, right = size-1;
        while (left < right) {
            int mid = (left + right) / 2;
            // tmp临时保存mid的位置
            int tmp = mid; 
            // 从mid下标开始向后遍历，
            // 1 找到第一个非空字符作为真正的mid
            // 2 遍历到right，则拿tmp-1作为right
            // 3 
            while (words[mid].empty() && mid <= right) {
                mid ++;
            }
            if (mid > right) {
                right = tmp-1;
                continue;
            }
            if (words[mid] == s) {
                return mid;
            }
            else if (words[mid] < s) {
                left = mid + 1;
            }
            else { // words[mid] > s
                right = tmp - 1;
            }
        }
        // 退出循环，表示left>=right，对left位置判断
        if (left < size && words[left] == s) {
            return left;
        }
        return -1;
    }
